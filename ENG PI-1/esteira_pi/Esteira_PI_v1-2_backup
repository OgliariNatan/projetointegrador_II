-----------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;
-----------------------------------------
ENTITY Esteira_PI IS
	PORT ( KEY  	:  IN 	STD_LOGIC_VECTOR (3 DOWNTO 0);
		   CLOCK_50 :  IN 	STD_LOGIC;
		   LCD_DATA	:  OUT	STD_LOGIC_VECTOR (7 DOWNTO 0);
		   LCD_EN	:  OUT	STD_LOGIC;
		   LCD_RW	:  OUT	STD_LOGIC;
		   LCD_RS	:  OUT	STD_LOGIC;
		   LCD_ON	:  OUT	STD_LOGIC;
		   LCD_BLON	:  OUT	STD_LOGIC
		 );
END Esteira_PI;
----------------------------------------
ARCHITECTURE object_picker OF Esteira_PI IS
	SIGNAL clock_100: STD_LOGIC;
	
	TYPE lcd_states IS 
	(idle, init);
		
		signal lcd_state : lcd_states := init;

	BEGIN

	LCD_ON	<=		'1';
	LCD_BLON	<=		'1';
	
	
		PROCESS (CLOCK_50)
		variable count100us  :  INTEGER RANGE 0 TO 5000;
		
		BEGIN
			
			IF (rising_edge(CLOCK_50)) THEN
				count100us := count100us + 1;
				IF (count100us = 1) THEN			--250
					clock_100 <= NOT clock_100;
					count100us := 0;
				END IF;
			END IF;
		END PROCESS;
	
	
---------------------------------------------------------------------------------------
-------------------------- MAQUINA DE ESTADOS LCD --------------------------------------
		PROCESS (clock_100)
		VARIABLE auxtemp	:	INTEGER RANGE 0 TO 2000;
		VARIABLE auxcount	:	INTEGER RANGE 0 TO 1;
		BEGIN
			IF (rising_edge(clock_100)) THEN
				
				IF (auxcount=1) THEN
					auxtemp := auxtemp + 1;
				END IF;
				
				CASE lcd_state IS
				WHEN idle => 
					auxtemp := 0;
					auxcount:=0;
					LCD_DATA <= "00000000";							
					LCD_RS	<=	'0';									
					LCD_RW	<=	'0';									
					LCD_EN 	<= '0';	
						
				WHEN init => 			
					CASE auxtemp IS								--Passo 1, 50ms----- Init
					WHEN 0 => 		LCD_DATA <= "00110000";							--
										LCD_RS	<=	'0';									--
										LCD_RW	<=	'0';									--
										LCD_EN 	<= '0';									--
										auxcount:=1;										--
										
					WHEN 1000 => 	LCD_EN	<= '1';									--
					WHEN 1001 => 	LCD_EN	<= '0';			--------------------
					
					WHEN 1100 => 	LCD_EN	<= '1';			--Passo 2, 5ms--------
					WHEN 1101 =>	LCD_EN	<= '0';			----------------------	

					WHEN 1103 =>	LCD_EN	<= '1';			--Passo 3, 100us---- Init
					WHEN 1104 =>	LCD_EN	<= '0';			--------------------			
			
					WHEN 1105 =>	LCD_DATA <= "00110000";	--Passo 4----------- Define 8bits lcd_DATA
					WHEN 1106 =>	LCD_EN	<= '1';									--
					WHEN 1107 => 	LCD_EN	<= '0';									--
					
					WHEN 1108 =>	LCD_DATA <= "00111000";	--Passo 5----------- Define 2 line and character 5x8
					WHEN 1109 =>	LCD_EN	<= '1';									--
					WHEN 1110 => 	LCD_EN	<= '0';									--
					
					WHEN 1111 => 	LCD_DATA <= "00001000";	--Passo 6----------- Display off
					WHEN 1112 =>  	LCD_EN	<= '1';									--
					WHEN 1113 =>	LCD_EN	<= '0';									--
					
					WHEN 1114 =>	LCD_DATA <= "00000001";	--Passo 7----------- Clear display
					WHEN 1115 =>	LCD_EN	<= '1';									--
					WHEN 1116 => 	LCD_EN	<= '0';									--
					
					WHEN 1117 =>	LCD_DATA <= "00000110";	--Passo 8----------- Entry set mode  ???????
					WHEN 1118 =>	LCD_EN	<= '1';									--
					WHEN 1119 =>	LCD_EN	<= '0';									--
					
					WHEN 1120 =>	LCD_DATA <= "00001100";	--Passo 9----------- Display on
					WHEN 1121 =>	LCD_EN	<= '1';									--
					WHEN 1122 =>	LCD_EN	<= '0';									--
										lcd_state <= idle;		--------------------
					WHEN OTHERS 	=> NULL;
					END CASE;								
				
				END CASE;
			END IF;
			
			
		END PROCESS;
--------------------------------------------------------------------------------------

END object_picker;
